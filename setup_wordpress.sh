#!/bin/bash

# Script Name: Instant WordPress Environment Setup
# Description: This script creates a new WordPress environment for a custom plugin.
# Args:
#   1. PROJECT_NAME (required): The name of the project.
#   2. --dir=DIR (optional): Specify the directory to create the project in. Default is ~/Sites.
#   3. --remove (optional): Remove the project.
#   4. --description=DESCRIPTION (optional): Specify the plugin description. Default is "A custom plugin".
#   5. --plugins=PLUGINS (optional): Specify the plugins to install (comma-separated).
#   6. --themes=THEMES (optional): Specify the themes to install (comma-separated).
#   7. --both (optional): Set up both theme and plugin.
# Author: Muzammil Hussain
# Date Created: 01-08-2023
# version: 1.0.2

# Load configuration
CONFIG_FILE=.env

# Function to check command existence
check_command() {
    if ! command -v $1 &> /dev/null; then
        echo "Error: $1 command not found. Please install $2."
        exit 1
    fi
}

# Function to set up Docker
setup_docker() {
    cat > docker-compose.yml <<- EOM
version: '3.3'
services:
   db:
     image: mysql:5.7
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress
   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "8000:80"
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
       WORDPRESS_DB_NAME: wordpress
volumes:
    db_data: {}
EOM

    docker-compose up -d

    sleep 20

    docker exec -it $(docker ps -qf "name=${PROJECT_NAME}_wordpress_1") bash -c "wp core install --url=localhost:8000 --title='$PROJECT_NAME' --admin_user=$ADMIN_USERNAME --admin_password=$ADMIN_PASSWORD --admin_email='$AUTHOR_EMAIL' --path=/var/www/html"

    docker exec -it $(docker ps -qf "name=${PROJECT_NAME}_wordpress_1") bash -c "echo \"define( 'WP_DEBUG', true );
    define( 'WP_DEBUG_LOG', true );
    define( 'WP_DEBUG_DISPLAY', true );
    @ini_set( 'display_errors', 1 );\" >> /var/www/html/wp-config.php"
    echo "Debugging and error reporting enabled."
}

# Function to remove project
remove_project() {
    echo "Removing project $PROJECT_NAME..."
    valet unlink $PROJECT_NAME
    rm -rf $DIR/$PROJECT_NAME
    mysql -h 127.0.0.1 -u $DB_USER -p$DB_PASS -e "DROP DATABASE $PROJECT_NAME;"
    echo "Project $PROJECT_NAME removed successfully."
    exit 0
}

# Function to create .env file
create_env_file() {
    echo "No configuration found. Creating new configuration..."
    echo "# This configuration is generated by the setup script." >> $CONFIG_FILE
    read -p "Enter MySQL username: " DB_USER
    echo "DB_USER=$DB_USER" >> $CONFIG_FILE
    read -s -p "Enter MySQL password: " DB_PASS
    echo
    echo "DB_PASS=$DB_PASS" >> $CONFIG_FILE
    read -p "Enter author name: " AUTHOR_NAME
    echo "AUTHOR_NAME=\"$AUTHOR_NAME\"" >> $CONFIG_FILE
    read -p "Enter author email: " AUTHOR_EMAIL
    echo "AUTHOR_EMAIL=\"$AUTHOR_EMAIL\"" >> $CONFIG_FILE
    read -p "Enter author website: " AUTHOR_WEBSITE
    echo "AUTHOR_WEBSITE=\"$AUTHOR_WEBSITE\"" >> $CONFIG_FILE
    read -p "Enter plugin URI: " PLUGIN_URI
    echo "PLUGIN_URI=\"$PLUGIN_URI\"" >> $CONFIG_FILE

    read -p "Enter plugins (comma-separated): " PLUGINS
    [ -z "$PLUGINS" ] && PLUGINS="woocommerce,query-monitor,performance-lab,health-check,elementor,wp-reset,user-switching,log-deprecated-notices,rewrite-rules-inspector,wp-crontrol"
    echo "PLUGINS=\"$PLUGINS\"" >> $CONFIG_FILE

    read -p "Enter environment (valet or docker): " ENVIRONMENT
    [ -z "$ENVIRONMENT" ] && ENVIRONMENT="valet"
    echo "ENVIRONMENT=\"$ENVIRONMENT\"" >> $CONFIG_FILE

    if [ "$ENVIRONMENT" == "valet" ]; then
        read -p "Enter Valet path: " VALET_PATH
        echo "VALET_PATH=\"$VALET_PATH\"" >> $CONFIG_FILE
    fi

    echo "Configuration saved."
}

# Load config values
if [ -f $CONFIG_FILE ]; then
    source $CONFIG_FILE
else
    create_env_file
    source $CONFIG_FILE
fi

# Variables
PROJECT_NAME=$1
THEMES=""
SETUP_TYPE="plugin"

# Check if required commands are available
check_command wp "WP-CLI"
check_command mysql "MySQL"

if [ "$ENVIRONMENT" == "valet" ]; then
    check_command valet "Valet"
    if [ -z "$VALET_PATH" ]; then
        echo "Error: VALET_PATH not set in .env file. Please provide the path to Valet sites."
        exit 1
    fi
    DIR="$VALET_PATH"
elif [ "$ENVIRONMENT" == "docker" ]; then
    check_command docker "Docker"
else
    echo "Error: Invalid environment. Please set ENVIRONMENT to either 'valet' or 'docker' in .env file."
    exit 1
fi

# Interactive mode if no project name provided
if [ -z "$PROJECT_NAME" ]; then
    echo "Please provide the following information:"
    read -p "Enter project name: " PROJECT_NAME
    read -p "Enter description: " DESCRIPTION
fi

# Replace spaces with hyphens, and convert to lowercase
PROJECT_NAME=$(echo $PROJECT_NAME | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr '_' '-' )

# Parse command line arguments
for arg in "$@"; do
    case $arg in
        --dir=*)
        DIR="${arg#*=}"
        shift
        ;;
        --remove)
        REMOVE=true
        shift
        ;;
        --description=*)
        DESCRIPTION="${arg#*=}"
        shift
        ;;
        --plugins=*)
        PLUGINS="${arg#*=}"
        shift
        ;;
        --themes=*)
        THEMES="${arg#*=}"
        SETUP_TYPE="theme"
        shift
        ;;
        --both)
        SETUP_TYPE="both"
        shift
        ;;
    esac
done

# If remove argument was provided, remove the project
[ "$REMOVE" = true ] && remove_project

# Create project directory
mkdir -p $DIR/$PROJECT_NAME
cd $DIR/$PROJECT_NAME

# Check if database exists
DB_EXISTS=$(mysqlshow --user=$DB_USER --password=$DB_PASS $PROJECT_NAME | grep -v Wildcard | grep -o $PROJECT_NAME)

[ "$DB_EXISTS" == "$PROJECT_NAME" ] && PROJECT_NAME="${PROJECT_NAME}_$(date +%s)"

# Create MySQL database
mysql -h 127.0.0.1 -u $DB_USER -p$DB_PASS -e "CREATE DATABASE $PROJECT_NAME;"

# Setup WordPress
wp core download
while [ ! -f wp-config-sample.php ]; do sleep 1; done
wp config create --dbname=$PROJECT_NAME --dbuser=$DB_USER --dbpass=$DB_PASS
wp core install --url=$PROJECT_NAME.test --title="$PROJECT_NAME" --admin_user=$ADMIN_USERNAME --admin_password=$ADMIN_PASSWORD --admin_email="$AUTHOR_EMAIL"

# Install plugins if setup type is plugin or both
if [[ "$SETUP_TYPE" == "plugin" || "$SETUP_TYPE" == "both" ]]; then
    echo "Installing plugins..."
    IFS=',' read -ra PLUGIN_ARRAY <<< "$PLUGINS"
    for PLUGIN in "${PLUGIN_ARRAY[@]}"; do
        PLUGIN_EXISTS=$(wp plugin get $PLUGIN --field=name 2>/dev/null)
        [ -z "$PLUGIN_EXISTS" ] && wp plugin install $PLUGIN --activate
    done
fi

# Install themes if setup type is theme or both
if [[ "$SETUP_TYPE" == "theme" || "$SETUP_TYPE" == "both" ]]; then
    echo "Installing themes..."
    IFS=',' read -ra THEME_ARRAY <<< "$THEMES"
    for THEME in "${THEME_ARRAY[@]}"; do
        THEME_EXISTS=$(wp theme get $THEME --field=name 2>/dev/null)
        [ -z "$THEME_EXISTS" ] && wp theme install $THEME --activate
    done
fi

# Create project plugin if setup type is plugin or both
if [[ "$SETUP_TYPE" == "plugin" || "$SETUP_TYPE" == "both" ]]; then
    echo "Creating project plugin..."
    mkdir wp-content/plugins/$PROJECT_NAME
    wp scaffold plugin $PROJECT_NAME --plugin_name="$PROJECT_NAME" --plugin_description="$DESCRIPTION" --plugin_author="$AUTHOR_NAME" --plugin_author_uri="$AUTHOR_WEBSITE" --plugin_uri="$PLUGIN_URI/$PROJECT_NAME" --activate
fi

# Create project plugin
mkdir wp-content/plugins/$PROJECT_NAME
wp scaffold plugin $PROJECT_NAME --plugin_name="$PROJECT_NAME" --plugin_description="$DESCRIPTION" --plugin_author="$AUTHOR_NAME" --plugin_author_uri="$AUTHOR_WEBSITE" --plugin_uri="$PLUGIN_URI/$PROJECT_NAME" --activate

# Enable debugging
if [ -f wp-config.php ]; then
    WP_DEBUG_DEFINED=$(wp eval "echo defined( 'WP_DEBUG' ) && WP_DEBUG;")
    [ "$WP_DEBUG_DEFINED" != "1" ] && echo "define( 'WP_DEBUG', true );" >> wp-config.php
    WP_DEBUG_LOG_DEFINED=$(wp eval "echo defined( 'WP_DEBUG_LOG' ) && WP_DEBUG_LOG;")
    [ "$WP_DEBUG_LOG_DEFINED" != "1" ] && echo "define( 'WP_DEBUG_LOG', true );" >> wp-config.php
    WP_DEBUG_DISPLAY_DEFINED=$(wp eval "echo defined( 'WP_DEBUG_DISPLAY' ) && WP_DEBUG_DISPLAY;")
    [ "$WP_DEBUG_DISPLAY_DEFINED" != "1" ] && echo "define( 'WP_DEBUG_DISPLAY', true );" >> wp-config.php
    echo "@ini_set( 'display_errors', 1 );" >> wp-config.php
fi

# Link Valet or setup Docker
if [ "$ENVIRONMENT" == "valet" ]; then
    valet link $PROJECT_NAME
    echo "Site linked successfully. Access your new WordPress site at http://$PROJECT_NAME.test"

    # Open site in default browser
    [[ "$OSTYPE" == "linux-gnu"* ]] && xdg-open "http://$PROJECT_NAME.test/wp-admin"
    [[ "$OSTYPE" == "darwin"* ]] && open "http://$PROJECT_NAME.test/wp-admin"
elif [ "$ENVIRONMENT" == "docker" ]; then
    setup_docker
    echo "Site linked successfully. Access your new WordPress site at http://localhost:8000"

    # Open site in default browser
    [[ "$OSTYPE" == "linux-gnu"* ]] && xdg-open "http://localhost:8000/wp-admin"
    [[ "$OSTYPE" == "darwin"* ]] && open "http://localhost:8000/wp-admin"
fi
